{"uid":"1a1f8957df0e8bda","name":"test_no_duplicates_in_view","fullName":"tests.test_v_agg_data#test_no_duplicates_in_view","historyId":"bb4269bf5926ad18419616c5fcdbfc41","time":{"start":1731084448789,"stop":1731084450158,"duration":1369},"description":"\nVerifies the absence of duplicates in the v_agg_data view. Duplicates may indicate issues in the data collection or processing process.\n","descriptionHtml":"<p>Verifies the absence of duplicates in the v_agg_data view. Duplicates may indicate issues in the data collection or processing process.</p>\n","status":"failed","statusMessage":"AssertionError: Duplicates found in the view:\n  App: gs_as, Device Model: iphone 7, Install Date: 2020-06-26, Installs: 80, Device Segment: non_target_device, Count: 8\n  App: hs_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 20, Device Segment: non_target_device, Count: 8\n  App: hs_as, Device Model: None, Install Date: 2020-10-26, Installs: 870, Device Segment: non_target_device, Count: 8\n  App: hs_as, Device Model: iphone 13, Install Date: 2020-04-26, Installs: 430, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-03-26, Installs: 20, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-02-26, Installs: 70, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-04-26, Installs: 320, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 2550, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-12-31, Installs: 20, Device Segment: non_target_device, Count: 8\nassert 9 == 0\n +  where 9 = len([('gs_as', 'iphone 7', datetime.date(2020, 6, 26), 80, 'non_target_device', 8), ('hs_as', 'iphone 7', datetime.date(2020, 7, 26), 20, 'non_target_device', 8), ('hs_as', None, datetime.date(2020, 10, 26), 870, 'non_target_device', 8), ('hs_as', 'iphone 13', datetime.date(2020, 4, 26), 430, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 3, 26), 20, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 2, 26), 70, 'non_target_device', 8), ...])","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7f1b58e2b650>, <environment.Environment object at 0x7f1b58e2aab0>)\n\n    @allure.story('View_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Verifies the absence of duplicates in the v_agg_data view. Duplicates may indicate issues in the data collection or processing process.\n    \"\"\")\n    def test_no_duplicates_in_view(setup):\n        \"\"\"\n         Verifies the absence of duplicates in the v_agg_data view.\n        \"\"\"\n        bq_client, env = setup  # Unpacking the values returned by the fixture\n        v_agg_data = env.get_full_table_id('v_agg_data')  # Get the full ID of the v_agg_data table\n    \n        # Form the SQL query to check for duplicates in the data\n        query = f\"\"\"\n            SELECT app_name, device_model, install_date, installs, device_segment, COUNT(*) as cnt\n            FROM `{v_agg_data}`  -- From the v_agg_data view\n            GROUP BY app_name, device_model, install_date, installs, device_segment  -- Group by key fields\n            HAVING cnt > 1  -- Condition to select groups with more than one record (duplicates)\n        \"\"\"\n    \n        # Use the helper function to execute the SQL query and log it in Allure\n        results = execute_query_and_log(bq_client, query,\n                                        \"Checking for duplicates in the v_agg_data view\",\n                                        include_query_in_message=False)\n    \n        # Collect duplicate records for easier display in the error message\n        duplicate_records = []\n        with allure.step(\"Collecting information about found duplicates\"):\n            for row in results:\n                duplicate_records.append(\n                    (row.app_name, row.device_model, row.install_date, row.installs, row.device_segment, row.cnt))\n    \n        # Check that the list of duplicates is empty; otherwise, report the issue\n        with allure.step(\"Verify that there are no duplicates\"):\n>           assert len(duplicate_records) == 0, \"Duplicates found in the view:\\n\" + \"\\n\".join(\n                f\"App: {record[0]}, Device Model: {record[1]}, Install Date: {record[2]}, Installs: {record[3]}, Device Segment: {record[4]}, Count: {record[5]}\"\n                for record in duplicate_records\n            )\nE           AssertionError: Duplicates found in the view:\nE             App: gs_as, Device Model: iphone 7, Install Date: 2020-06-26, Installs: 80, Device Segment: non_target_device, Count: 8\nE             App: hs_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 20, Device Segment: non_target_device, Count: 8\nE             App: hs_as, Device Model: None, Install Date: 2020-10-26, Installs: 870, Device Segment: non_target_device, Count: 8\nE             App: hs_as, Device Model: iphone 13, Install Date: 2020-04-26, Installs: 430, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-03-26, Installs: 20, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-02-26, Installs: 70, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-04-26, Installs: 320, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 2550, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-12-31, Installs: 20, Device Segment: non_target_device, Count: 8\nE           assert 9 == 0\nE            +  where 9 = len([('gs_as', 'iphone 7', datetime.date(2020, 6, 26), 80, 'non_target_device', 8), ('hs_as', 'iphone 7', datetime.date(2020, 7, 26), 20, 'non_target_device', 8), ('hs_as', None, datetime.date(2020, 10, 26), 870, 'non_target_device', 8), ('hs_as', 'iphone 13', datetime.date(2020, 4, 26), 430, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 3, 26), 20, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 2, 26), 70, 'non_target_device', 8), ...])\n\ntests/test_v_agg_data.py:127: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1731084444642,"stop":1731084444643,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nVerifies the absence of duplicates in the v_agg_data view. Duplicates may indicate issues in the data collection or processing process.\n","status":"failed","statusMessage":"AssertionError: Duplicates found in the view:\n  App: gs_as, Device Model: iphone 7, Install Date: 2020-06-26, Installs: 80, Device Segment: non_target_device, Count: 8\n  App: hs_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 20, Device Segment: non_target_device, Count: 8\n  App: hs_as, Device Model: None, Install Date: 2020-10-26, Installs: 870, Device Segment: non_target_device, Count: 8\n  App: hs_as, Device Model: iphone 13, Install Date: 2020-04-26, Installs: 430, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-03-26, Installs: 20, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-02-26, Installs: 70, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-04-26, Installs: 320, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 2550, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-12-31, Installs: 20, Device Segment: non_target_device, Count: 8\nassert 9 == 0\n +  where 9 = len([('gs_as', 'iphone 7', datetime.date(2020, 6, 26), 80, 'non_target_device', 8), ('hs_as', 'iphone 7', datetime.date(2020, 7, 26), 20, 'non_target_device', 8), ('hs_as', None, datetime.date(2020, 10, 26), 870, 'non_target_device', 8), ('hs_as', 'iphone 13', datetime.date(2020, 4, 26), 430, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 3, 26), 20, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 2, 26), 70, 'non_target_device', 8), ...])","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7f1b58e2b650>, <environment.Environment object at 0x7f1b58e2aab0>)\n\n    @allure.story('View_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Verifies the absence of duplicates in the v_agg_data view. Duplicates may indicate issues in the data collection or processing process.\n    \"\"\")\n    def test_no_duplicates_in_view(setup):\n        \"\"\"\n         Verifies the absence of duplicates in the v_agg_data view.\n        \"\"\"\n        bq_client, env = setup  # Unpacking the values returned by the fixture\n        v_agg_data = env.get_full_table_id('v_agg_data')  # Get the full ID of the v_agg_data table\n    \n        # Form the SQL query to check for duplicates in the data\n        query = f\"\"\"\n            SELECT app_name, device_model, install_date, installs, device_segment, COUNT(*) as cnt\n            FROM `{v_agg_data}`  -- From the v_agg_data view\n            GROUP BY app_name, device_model, install_date, installs, device_segment  -- Group by key fields\n            HAVING cnt > 1  -- Condition to select groups with more than one record (duplicates)\n        \"\"\"\n    \n        # Use the helper function to execute the SQL query and log it in Allure\n        results = execute_query_and_log(bq_client, query,\n                                        \"Checking for duplicates in the v_agg_data view\",\n                                        include_query_in_message=False)\n    \n        # Collect duplicate records for easier display in the error message\n        duplicate_records = []\n        with allure.step(\"Collecting information about found duplicates\"):\n            for row in results:\n                duplicate_records.append(\n                    (row.app_name, row.device_model, row.install_date, row.installs, row.device_segment, row.cnt))\n    \n        # Check that the list of duplicates is empty; otherwise, report the issue\n        with allure.step(\"Verify that there are no duplicates\"):\n>           assert len(duplicate_records) == 0, \"Duplicates found in the view:\\n\" + \"\\n\".join(\n                f\"App: {record[0]}, Device Model: {record[1]}, Install Date: {record[2]}, Installs: {record[3]}, Device Segment: {record[4]}, Count: {record[5]}\"\n                for record in duplicate_records\n            )\nE           AssertionError: Duplicates found in the view:\nE             App: gs_as, Device Model: iphone 7, Install Date: 2020-06-26, Installs: 80, Device Segment: non_target_device, Count: 8\nE             App: hs_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 20, Device Segment: non_target_device, Count: 8\nE             App: hs_as, Device Model: None, Install Date: 2020-10-26, Installs: 870, Device Segment: non_target_device, Count: 8\nE             App: hs_as, Device Model: iphone 13, Install Date: 2020-04-26, Installs: 430, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-03-26, Installs: 20, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-02-26, Installs: 70, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-04-26, Installs: 320, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 2550, Device Segment: non_target_device, Count: 8\nE             App: fd_as, Device Model: iphone 7, Install Date: 2020-12-31, Installs: 20, Device Segment: non_target_device, Count: 8\nE           assert 9 == 0\nE            +  where 9 = len([('gs_as', 'iphone 7', datetime.date(2020, 6, 26), 80, 'non_target_device', 8), ('hs_as', 'iphone 7', datetime.date(2020, 7, 26), 20, 'non_target_device', 8), ('hs_as', None, datetime.date(2020, 10, 26), 870, 'non_target_device', 8), ('hs_as', 'iphone 13', datetime.date(2020, 4, 26), 430, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 3, 26), 20, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 2, 26), 70, 'non_target_device', 8), ...])\n\ntests/test_v_agg_data.py:127: AssertionError","steps":[{"name":"Checking for duplicates in the v_agg_data view","time":{"start":1731084448789,"stop":1731084450158,"duration":1369},"status":"passed","steps":[],"attachments":[{"uid":"c0c12d3410579259","name":"SQL Query","source":"c0c12d3410579259.txt","type":"text/plain","size":387},{"uid":"25b69defeb3d1b77","name":"SQL Results","source":"25b69defeb3d1b77.json","type":"application/json","size":1838}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"Collecting information about found duplicates","time":{"start":1731084450158,"stop":1731084450158,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verify that there are no duplicates","time":{"start":1731084450158,"stop":1731084450158,"duration":0},"status":"failed","statusMessage":"AssertionError: Duplicates found in the view:\n  App: gs_as, Device Model: iphone 7, Install Date: 2020-06-26, Installs: 80, Device Segment: non_target_device, Count: 8\n  App: hs_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 20, Device Segment: non_target_device, Count: 8\n  App: hs_as, Device Model: None, Install Date: 2020-10-26, Installs: 870, Device Segment: non_target_device, Count: 8\n  App: hs_as, Device Model: iphone 13, Install Date: 2020-04-26, Installs: 430, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-03-26, Installs: 20, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-02-26, Installs: 70, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-04-26, Installs: 320, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-07-26, Installs: 2550, Device Segment: non_target_device, Count: 8\n  App: fd_as, Device Model: iphone 7, Install Date: 2020-12-31, Installs: 20, Device Segment: non_target_device, Count: 8\nassert 9 == 0\n +  where 9 = len([('gs_as', 'iphone 7', datetime.date(2020, 6, 26), 80, 'non_target_device', 8), ('hs_as', 'iphone 7', datetime.date(2020, 7, 26), 20, 'non_target_device', 8), ('hs_as', None, datetime.date(2020, 10, 26), 870, 'non_target_device', 8), ('hs_as', 'iphone 13', datetime.date(2020, 4, 26), 430, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 3, 26), 20, 'non_target_device', 8), ('fd_as', 'iphone 7', datetime.date(2020, 2, 26), 70, 'non_target_device', 8), ...])\n","statusTrace":"  File \"/tests_project/tests/test_v_agg_data.py\", line 127, in test_no_duplicates_in_view\n    assert len(duplicate_records) == 0, \"Duplicates found in the view:\\n\" + \"\\n\".join(\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"View_Creation"},{"name":"severity","value":"normal"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_v_agg_data"},{"name":"host","value":"27ca6fce9de0"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_v_agg_data"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1a1f8957df0e8bda.json","parameterValues":[]}