{"uid":"344791c5b90eb4cc","name":"test_non_target_device_usage","fullName":"tests.test_v_agg_data#test_non_target_device_usage","historyId":"c4175a9b74b0bba553a3476f79e16687","time":{"start":1729095351723,"stop":1729095352785,"duration":1062},"description":"\nVerifies that 'non_target_device' is used in the v_agg_data view only when there are no device segments available in the device_segments table.\n","descriptionHtml":"<p>Verifies that 'non_target_device' is used in the v_agg_data view only when there are no device segments available in the device_segments table.</p>\n","status":"failed","statusMessage":"AssertionError: Incorrect use of 'non_target_device' found:\n  Model: 'iphone 7', Expected segments: [01_Top]\n  Model: 'redmi 13', Expected segments: [01_Top,01_Top]\n  Model: 'redmi 5', Expected segments: [05_Low]\n  Model: 'iphone 13', Expected segments: [03_Mid2]\nassert not [\"Model: 'iphone 7', Expected segments: [01_Top]\", \"Model: 'redmi 13', Expected segments: [01_Top,01_Top]\", \"Model: 'redmi 5', Expected segments: [05_Low]\", \"Model: 'iphone 13', Expected segments: [03_Mid2]\"]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7fade1709220>, <environment.Environment object at 0x7fade17095e0>)\n\n    @allure.story('View_Creation')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"\"\"\n    Verifies that 'non_target_device' is used in the v_agg_data view only when there are no device segments available in the device_segments table.\n    \"\"\")\n    def test_non_target_device_usage(setup):\n        \"\"\"\n        Verifies the correct use of 'non_target_device' in v_agg_data.\n        This test ensures that 'non_target_device' is only used when there are no matching segments in device_segments.\n        If device models exist in device_segments, using 'non_target_device' is considered incorrect.\n        \"\"\"\n        bq_client, env = setup  # Unpack the fixture's return values\n        v_agg_data = env.get_full_table_id('v_agg_data')  # Get the full ID of the v_agg_data table\n        device_segments = env.get_full_table_id('device_segments')  # Get the full identifier of the device_segments table\n    \n        # Form the query to select device models with 'non_target_device' and check their presence in device_segments.\n        query = f\"\"\"\n        -- Select device models marked as 'non_target_device' and check their presence in the device_segments table.\n        -- If the model exists in device_segments, it indicates incorrect use of the 'non_target_device' label.\n        SELECT\n          v.device_model,\n          STRING_AGG(d.segment) AS expected_segments  -- Aggregate all segments associated with the device model into a string.\n        FROM (\n          SELECT DISTINCT device_model  -- Select unique device models labeled as 'non_target_device' from v_agg_data.\n          FROM `{v_agg_data}`\n          WHERE device_segment = 'non_target_device'\n        ) v\n        LEFT JOIN `{device_segments}` d ON v.device_model = d.device_model  -- Join with device_segments to check model existence.\n        GROUP BY v.device_model\n        HAVING COUNT(d.segment) > 0  -- Select only cases where the model has at least one segment in device_segments.\n        \"\"\"\n    \n        # Execute the query and log it in Allure\n        results = execute_query_and_log(bq_client, query,\n                                        \"Checking incorrect use of 'non_target_device 'non_target_device'\",\n                                        include_query_in_message=False)\n    \n        # Collect information about models and segments for the error message.\n        incorrect_models = []\n        for row in results:\n            incorrect_models.append(f\"Model: '{row.device_model}', Expected segments: [{row.expected_segments}]\")\n    \n        # Assert that no device models are incorrectly marked as 'non_target_device'.\n>       assert not incorrect_models, \"Incorrect use of 'non_target_device' found:\\n\" + \"\\n\".join(incorrect_models)\nE       AssertionError: Incorrect use of 'non_target_device' found:\nE         Model: 'iphone 7', Expected segments: [01_Top]\nE         Model: 'redmi 13', Expected segments: [01_Top,01_Top]\nE         Model: 'redmi 5', Expected segments: [05_Low]\nE         Model: 'iphone 13', Expected segments: [03_Mid2]\nE       assert not [\"Model: 'iphone 7', Expected segments: [01_Top]\", \"Model: 'redmi 13', Expected segments: [01_Top,01_Top]\", \"Model: 'redmi 5', Expected segments: [05_Low]\", \"Model: 'iphone 13', Expected segments: [03_Mid2]\"]\n\ntests/test_v_agg_data.py:224: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1729095345086,"stop":1729095345087,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nVerifies that 'non_target_device' is used in the v_agg_data view only when there are no device segments available in the device_segments table.\n","status":"failed","statusMessage":"AssertionError: Incorrect use of 'non_target_device' found:\n  Model: 'iphone 7', Expected segments: [01_Top]\n  Model: 'redmi 13', Expected segments: [01_Top,01_Top]\n  Model: 'redmi 5', Expected segments: [05_Low]\n  Model: 'iphone 13', Expected segments: [03_Mid2]\nassert not [\"Model: 'iphone 7', Expected segments: [01_Top]\", \"Model: 'redmi 13', Expected segments: [01_Top,01_Top]\", \"Model: 'redmi 5', Expected segments: [05_Low]\", \"Model: 'iphone 13', Expected segments: [03_Mid2]\"]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7fade1709220>, <environment.Environment object at 0x7fade17095e0>)\n\n    @allure.story('View_Creation')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"\"\"\n    Verifies that 'non_target_device' is used in the v_agg_data view only when there are no device segments available in the device_segments table.\n    \"\"\")\n    def test_non_target_device_usage(setup):\n        \"\"\"\n        Verifies the correct use of 'non_target_device' in v_agg_data.\n        This test ensures that 'non_target_device' is only used when there are no matching segments in device_segments.\n        If device models exist in device_segments, using 'non_target_device' is considered incorrect.\n        \"\"\"\n        bq_client, env = setup  # Unpack the fixture's return values\n        v_agg_data = env.get_full_table_id('v_agg_data')  # Get the full ID of the v_agg_data table\n        device_segments = env.get_full_table_id('device_segments')  # Get the full identifier of the device_segments table\n    \n        # Form the query to select device models with 'non_target_device' and check their presence in device_segments.\n        query = f\"\"\"\n        -- Select device models marked as 'non_target_device' and check their presence in the device_segments table.\n        -- If the model exists in device_segments, it indicates incorrect use of the 'non_target_device' label.\n        SELECT\n          v.device_model,\n          STRING_AGG(d.segment) AS expected_segments  -- Aggregate all segments associated with the device model into a string.\n        FROM (\n          SELECT DISTINCT device_model  -- Select unique device models labeled as 'non_target_device' from v_agg_data.\n          FROM `{v_agg_data}`\n          WHERE device_segment = 'non_target_device'\n        ) v\n        LEFT JOIN `{device_segments}` d ON v.device_model = d.device_model  -- Join with device_segments to check model existence.\n        GROUP BY v.device_model\n        HAVING COUNT(d.segment) > 0  -- Select only cases where the model has at least one segment in device_segments.\n        \"\"\"\n    \n        # Execute the query and log it in Allure\n        results = execute_query_and_log(bq_client, query,\n                                        \"Checking incorrect use of 'non_target_device 'non_target_device'\",\n                                        include_query_in_message=False)\n    \n        # Collect information about models and segments for the error message.\n        incorrect_models = []\n        for row in results:\n            incorrect_models.append(f\"Model: '{row.device_model}', Expected segments: [{row.expected_segments}]\")\n    \n        # Assert that no device models are incorrectly marked as 'non_target_device'.\n>       assert not incorrect_models, \"Incorrect use of 'non_target_device' found:\\n\" + \"\\n\".join(incorrect_models)\nE       AssertionError: Incorrect use of 'non_target_device' found:\nE         Model: 'iphone 7', Expected segments: [01_Top]\nE         Model: 'redmi 13', Expected segments: [01_Top,01_Top]\nE         Model: 'redmi 5', Expected segments: [05_Low]\nE         Model: 'iphone 13', Expected segments: [03_Mid2]\nE       assert not [\"Model: 'iphone 7', Expected segments: [01_Top]\", \"Model: 'redmi 13', Expected segments: [01_Top,01_Top]\", \"Model: 'redmi 5', Expected segments: [05_Low]\", \"Model: 'iphone 13', Expected segments: [03_Mid2]\"]\n\ntests/test_v_agg_data.py:224: AssertionError","steps":[{"name":"Checking incorrect use of 'non_target_device 'non_target_device'","time":{"start":1729095351723,"stop":1729095352785,"duration":1062},"status":"passed","steps":[],"attachments":[{"uid":"96c1590e6a4ba49","name":"SQL Query","source":"96c1590e6a4ba49.txt","type":"text/plain","size":930},{"uid":"22237c371b883c74","name":"SQL Results","source":"22237c371b883c74.json","type":"application/json","size":358}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"View_Creation"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_v_agg_data"},{"name":"host","value":"5b81c8e9695a"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_v_agg_data"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"344791c5b90eb4cc.json","parameterValues":[]}