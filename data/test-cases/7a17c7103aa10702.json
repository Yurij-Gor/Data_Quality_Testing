{"uid":"7a17c7103aa10702","name":"test_missing_device_data","fullName":"tests.test_data_in_tables#test_missing_device_data","historyId":"2bb1c061d37d1a7a447831eff1866625","time":{"start":1728594967973,"stop":1728594969011,"duration":1038},"description":"\nТест проверяет наличие соответствующих записей в таблице device_segments для каждой записи в таблице agg_data, \nобеспечивая целостность данных о приложениях и устройствах.\n","descriptionHtml":"<p>Тест проверяет наличие соответствующих записей в таблице device_segments для каждой записи в таблице agg_data,<br />\nобеспечивая целостность данных о приложениях и устройствах.</p>\n","status":"failed","statusMessage":"AssertionError: Найдены записи в agg_data без соответствующих моделей устройств в device_segments:\n  App ID: 32110, Device Model: iphone 7, App Name: gs_as, Platform: as\n  App ID: 32116, Device Model: None, App Name: fd_gp, Platform: gp\n  App ID: 32116, Device Model: iphone 7, App Name: fd_gp, Platform: gp\n  App ID: 31885, Device Model: iphone 7, App Name: hs_as, Platform: as\n  App ID: 31885, Device Model: None, App Name: hs_as, Platform: as\n  App ID: 31885, Device Model: iphone 13, App Name: hs_as, Platform: as\nassert not [(32110, 'iphone 7', 'gs_as', 'as'), (32116, None, 'fd_gp', 'gp'), (32116, 'iphone 7', 'fd_gp', 'gp'), (31885, 'iphone 7', 'hs_as', 'as'), (31885, None, 'hs_as', 'as'), (31885, 'iphone 13', 'hs_as', 'as')]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7f8f2d7d82c0>, <environment.Environment object at 0x7f8f2d7c52e0>)\n\n    @allure.story('Data_Tables_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Тест проверяет наличие соответствующих записей в таблице device_segments для каждой записи в таблице agg_data,\n    обеспечивая целостность данных о приложениях и устройствах.\n    \"\"\")\n    def test_missing_device_data(setup):\n        \"\"\"\n        Проверка наличия соответствующих записей в таблице device_segments для каждой записи в таблице agg_data.\n        \"\"\"\n        bq_client, env = setup\n        agg_data = env.get_full_table_id('agg_data')\n        app_names = env.get_full_table_id('app_names')\n        device_segments = env.get_full_table_id('device_segments')\n    \n        query = f\"\"\"\n            -- Выбираем данные о приложениях и моделях устройств\n            SELECT agg.app_id, agg.device_model, an.app_name, an.platform\n            -- Из таблицы agg_data, используя псевдоним 'agg'\n            FROM `{agg_data}` agg\n            -- Присоединяем таблицу app_names, используя псевдоним 'an', по app_id\n            JOIN `{app_names}` an ON agg.app_id = an.app_id\n            -- Левое соединение с таблицей device_segments, используя псевдоним 'ds', по модели устройства с учетом регистра\n            LEFT JOIN `{device_segments}` ds ON UPPER(agg.device_model) = UPPER(ds.device_model)\n                -- Также проверяем соответствие имени приложения и платформы между app_names и device_segments\n                AND an.app_name = ds.app_short AND an.platform = ds.platform\n            -- Условие, выбирающее записи, для которых нет соответствующей модели устройства в device_segments\n            WHERE ds.device_model IS NULL\n        \"\"\"\n    \n        results = execute_query_and_log(bq_client, query, \"Поиск данных без соответствий в device_segments\",\n                                        include_query_in_message=False)\n    \n        failed_items = [(row.app_id, row.device_model, row.app_name, row.platform) for row in results]\n    \n        with allure.step(\"Проверка на отсутствие записей без соответствующих моделей устройств в device_segments\"):\n>           assert not failed_items, \"Найдены записи в agg_data без соответствующих моделей устройств в device_segments:\\n\" + \\\n                                     \"\\n\".join(\n                                         f\"App ID: {app_id}, Device Model: {device_model}, App Name: {app_name}, Platform: {platform}\"\n                                         for app_id, device_model, app_name, platform in failed_items)\nE           AssertionError: Найдены записи в agg_data без соответствующих моделей устройств в device_segments:\nE             App ID: 32110, Device Model: iphone 7, App Name: gs_as, Platform: as\nE             App ID: 32116, Device Model: None, App Name: fd_gp, Platform: gp\nE             App ID: 32116, Device Model: iphone 7, App Name: fd_gp, Platform: gp\nE             App ID: 31885, Device Model: iphone 7, App Name: hs_as, Platform: as\nE             App ID: 31885, Device Model: None, App Name: hs_as, Platform: as\nE             App ID: 31885, Device Model: iphone 13, App Name: hs_as, Platform: as\nE           assert not [(32110, 'iphone 7', 'gs_as', 'as'), (32116, None, 'fd_gp', 'gp'), (32116, 'iphone 7', 'fd_gp', 'gp'), (31885, 'iphone 7', 'hs_as', 'as'), (31885, None, 'hs_as', 'as'), (31885, 'iphone 13', 'hs_as', 'as')]\n\ntests/test_data_in_tables.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1728594966838,"stop":1728594966839,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nТест проверяет наличие соответствующих записей в таблице device_segments для каждой записи в таблице agg_data, \nобеспечивая целостность данных о приложениях и устройствах.\n","status":"failed","statusMessage":"AssertionError: Найдены записи в agg_data без соответствующих моделей устройств в device_segments:\n  App ID: 32110, Device Model: iphone 7, App Name: gs_as, Platform: as\n  App ID: 32116, Device Model: None, App Name: fd_gp, Platform: gp\n  App ID: 32116, Device Model: iphone 7, App Name: fd_gp, Platform: gp\n  App ID: 31885, Device Model: iphone 7, App Name: hs_as, Platform: as\n  App ID: 31885, Device Model: None, App Name: hs_as, Platform: as\n  App ID: 31885, Device Model: iphone 13, App Name: hs_as, Platform: as\nassert not [(32110, 'iphone 7', 'gs_as', 'as'), (32116, None, 'fd_gp', 'gp'), (32116, 'iphone 7', 'fd_gp', 'gp'), (31885, 'iphone 7', 'hs_as', 'as'), (31885, None, 'hs_as', 'as'), (31885, 'iphone 13', 'hs_as', 'as')]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7f8f2d7d82c0>, <environment.Environment object at 0x7f8f2d7c52e0>)\n\n    @allure.story('Data_Tables_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Тест проверяет наличие соответствующих записей в таблице device_segments для каждой записи в таблице agg_data,\n    обеспечивая целостность данных о приложениях и устройствах.\n    \"\"\")\n    def test_missing_device_data(setup):\n        \"\"\"\n        Проверка наличия соответствующих записей в таблице device_segments для каждой записи в таблице agg_data.\n        \"\"\"\n        bq_client, env = setup\n        agg_data = env.get_full_table_id('agg_data')\n        app_names = env.get_full_table_id('app_names')\n        device_segments = env.get_full_table_id('device_segments')\n    \n        query = f\"\"\"\n            -- Выбираем данные о приложениях и моделях устройств\n            SELECT agg.app_id, agg.device_model, an.app_name, an.platform\n            -- Из таблицы agg_data, используя псевдоним 'agg'\n            FROM `{agg_data}` agg\n            -- Присоединяем таблицу app_names, используя псевдоним 'an', по app_id\n            JOIN `{app_names}` an ON agg.app_id = an.app_id\n            -- Левое соединение с таблицей device_segments, используя псевдоним 'ds', по модели устройства с учетом регистра\n            LEFT JOIN `{device_segments}` ds ON UPPER(agg.device_model) = UPPER(ds.device_model)\n                -- Также проверяем соответствие имени приложения и платформы между app_names и device_segments\n                AND an.app_name = ds.app_short AND an.platform = ds.platform\n            -- Условие, выбирающее записи, для которых нет соответствующей модели устройства в device_segments\n            WHERE ds.device_model IS NULL\n        \"\"\"\n    \n        results = execute_query_and_log(bq_client, query, \"Поиск данных без соответствий в device_segments\",\n                                        include_query_in_message=False)\n    \n        failed_items = [(row.app_id, row.device_model, row.app_name, row.platform) for row in results]\n    \n        with allure.step(\"Проверка на отсутствие записей без соответствующих моделей устройств в device_segments\"):\n>           assert not failed_items, \"Найдены записи в agg_data без соответствующих моделей устройств в device_segments:\\n\" + \\\n                                     \"\\n\".join(\n                                         f\"App ID: {app_id}, Device Model: {device_model}, App Name: {app_name}, Platform: {platform}\"\n                                         for app_id, device_model, app_name, platform in failed_items)\nE           AssertionError: Найдены записи в agg_data без соответствующих моделей устройств в device_segments:\nE             App ID: 32110, Device Model: iphone 7, App Name: gs_as, Platform: as\nE             App ID: 32116, Device Model: None, App Name: fd_gp, Platform: gp\nE             App ID: 32116, Device Model: iphone 7, App Name: fd_gp, Platform: gp\nE             App ID: 31885, Device Model: iphone 7, App Name: hs_as, Platform: as\nE             App ID: 31885, Device Model: None, App Name: hs_as, Platform: as\nE             App ID: 31885, Device Model: iphone 13, App Name: hs_as, Platform: as\nE           assert not [(32110, 'iphone 7', 'gs_as', 'as'), (32116, None, 'fd_gp', 'gp'), (32116, 'iphone 7', 'fd_gp', 'gp'), (31885, 'iphone 7', 'hs_as', 'as'), (31885, None, 'hs_as', 'as'), (31885, 'iphone 13', 'hs_as', 'as')]\n\ntests/test_data_in_tables.py:83: AssertionError","steps":[{"name":"Поиск данных без соответствий в device_segments","time":{"start":1728594967973,"stop":1728594969010,"duration":1037},"status":"passed","steps":[],"attachments":[{"uid":"7594b9e756c1013d","name":"SQL Query","source":"7594b9e756c1013d.txt","type":"text/plain","size":1306},{"uid":"531a02e21fb8202","name":"SQL Results","source":"531a02e21fb8202.json","type":"application/json","size":759}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"Проверка на отсутствие записей без соответствующих моделей устройств в device_segments","time":{"start":1728594969010,"stop":1728594969010,"duration":0},"status":"failed","statusMessage":"AssertionError: Найдены записи в agg_data без соответствующих моделей устройств в device_segments:\n  App ID: 32110, Device Model: iphone 7, App Name: gs_as, Platform: as\n  App ID: 32116, Device Model: None, App Name: fd_gp, Platform: gp\n  App ID: 32116, Device Model: iphone 7, App Name: fd_gp, Platform: gp\n  App ID: 31885, Device Model: iphone 7, App Name: hs_as, Platform: as\n  App ID: 31885, Device Model: None, App Name: hs_as, Platform: as\n  App ID: 31885, Device Model: iphone 13, App Name: hs_as, Platform: as\nassert not [(32110, 'iphone 7', 'gs_as', 'as'), (32116, None, 'fd_gp', 'gp'), (32116, 'iphone 7', 'fd_gp', 'gp'), (31885, 'iphone 7', 'hs_as', 'as'), (31885, None, 'hs_as', 'as'), (31885, 'iphone 13', 'hs_as', 'as')]\n","statusTrace":"  File \"/tests_project/tests/test_data_in_tables.py\", line 83, in test_missing_device_data\n    assert not failed_items, \"Найдены записи в agg_data без соответствующих моделей устройств в device_segments:\\n\" + \\\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Data_Tables_Creation"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_data_in_tables"},{"name":"host","value":"eeb5820ddcab"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_data_in_tables"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7a17c7103aa10702.json","parameterValues":[]}