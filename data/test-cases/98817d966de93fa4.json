{"uid":"98817d966de93fa4","name":"test_undefined_device_model_installs","fullName":"tests.test_v_agg_data_additional#test_undefined_device_model_installs","historyId":"806e94d9ae03ace3b161dce632349bf8","time":{"start":1729095357143,"stop":1729095358965,"duration":1822},"description":"\nTests for application installs with undefined device models in the v_agg_data view.\n","descriptionHtml":"<p>Tests for application installs with undefined device models in the v_agg_data view.</p>\n","status":"failed","statusMessage":"AssertionError: Applications with undefined device model installs found:\n  App Name: fd_gp, Install Count: 1\n  App Name: hs_as, Install Count: 8\n  \nassert False","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7fade1558890>, <environment.Environment object at 0x7fade15580e0>)\n\n    @allure.story('View_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Tests for application installs with undefined device models in the v_agg_data view.\n    \"\"\")\n    def test_undefined_device_model_installs(setup):\n        \"\"\"\n        Tests for application installs with undefined device models.\n        \"\"\"\n        bq_client, env = setup\n        v_agg_data = env.get_full_table_id('v_agg_data')\n    \n        # Formulate the query to select app names and count installs where the device model is undefined or empty.\n        query = f\"\"\"\n            -- Select app names and count installs where the device model is undefined or an empty string\n            SELECT app_name, COUNT(*) as total_installs\n            FROM `{v_agg_data}`\n            WHERE device_model IS NULL OR device_model = ''\n            GROUP BY app_name\n        \"\"\"\n    \n        # Use the helper function to execute the query and log it in Allure.\n        results = execute_query_and_log(bq_client, query, \"Checking for installs with undefined device models\",\n                                        include_query_in_message=False)\n    \n        # Convert query results to a list of tuples for further analysis.\n        undefined_device_model_installs = [(row.app_name, row.total_installs) for row in results]\n    \n        # If any installs with undefined device models are found, compile an error message with details.\n        if len(undefined_device_model_installs) > 0:\n            error_message = \"Applications with undefined device model installs found:\\n\"\n            for app_name, total_installs in undefined_device_model_installs:\n                error_message += f\"App Name: {app_name}, Install Count: {total_installs}\\n\"\n>           assert False, error_message\nE           AssertionError: Applications with undefined device model installs found:\nE             App Name: fd_gp, Install Count: 1\nE             App Name: hs_as, Install Count: 8\nE             \nE           assert False\n\ntests/test_v_agg_data_additional.py:152: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1729095352791,"stop":1729095352792,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nTests for application installs with undefined device models in the v_agg_data view.\n","status":"failed","statusMessage":"AssertionError: Applications with undefined device model installs found:\n  App Name: fd_gp, Install Count: 1\n  App Name: hs_as, Install Count: 8\n  \nassert False","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7fade1558890>, <environment.Environment object at 0x7fade15580e0>)\n\n    @allure.story('View_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Tests for application installs with undefined device models in the v_agg_data view.\n    \"\"\")\n    def test_undefined_device_model_installs(setup):\n        \"\"\"\n        Tests for application installs with undefined device models.\n        \"\"\"\n        bq_client, env = setup\n        v_agg_data = env.get_full_table_id('v_agg_data')\n    \n        # Formulate the query to select app names and count installs where the device model is undefined or empty.\n        query = f\"\"\"\n            -- Select app names and count installs where the device model is undefined or an empty string\n            SELECT app_name, COUNT(*) as total_installs\n            FROM `{v_agg_data}`\n            WHERE device_model IS NULL OR device_model = ''\n            GROUP BY app_name\n        \"\"\"\n    \n        # Use the helper function to execute the query and log it in Allure.\n        results = execute_query_and_log(bq_client, query, \"Checking for installs with undefined device models\",\n                                        include_query_in_message=False)\n    \n        # Convert query results to a list of tuples for further analysis.\n        undefined_device_model_installs = [(row.app_name, row.total_installs) for row in results]\n    \n        # If any installs with undefined device models are found, compile an error message with details.\n        if len(undefined_device_model_installs) > 0:\n            error_message = \"Applications with undefined device model installs found:\\n\"\n            for app_name, total_installs in undefined_device_model_installs:\n                error_message += f\"App Name: {app_name}, Install Count: {total_installs}\\n\"\n>           assert False, error_message\nE           AssertionError: Applications with undefined device model installs found:\nE             App Name: fd_gp, Install Count: 1\nE             App Name: hs_as, Install Count: 8\nE             \nE           assert False\n\ntests/test_v_agg_data_additional.py:152: AssertionError","steps":[{"name":"Checking for installs with undefined device models","time":{"start":1729095357144,"stop":1729095358965,"duration":1821},"status":"passed","steps":[],"attachments":[{"uid":"e26014a1ad72749","name":"SQL Query","source":"e26014a1ad72749.txt","type":"text/plain","size":302},{"uid":"256d5296a3255af","name":"SQL Results","source":"256d5296a3255af.json","type":"application/json","size":142}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"View_Creation"},{"name":"severity","value":"normal"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_v_agg_data_additional"},{"name":"host","value":"5b81c8e9695a"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_v_agg_data_additional"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"98817d966de93fa4.json","parameterValues":[]}