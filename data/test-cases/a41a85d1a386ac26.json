{"uid":"a41a85d1a386ac26","name":"test_device_segments_uniqueness","fullName":"tests.test_data_in_tables#test_device_segments_uniqueness","historyId":"57e3a93a46f6ba15708add02456e3c2e","time":{"start":1731084438417,"stop":1731084439400,"duration":983},"description":"\nVerifies the uniqueness of records in the device_segments table based on the combination of device_model and segment, \nensuring no duplicates, which is critical for data integrity.\n","descriptionHtml":"<p>Verifies the uniqueness of records in the device_segments table based on the combination of device_model and segment,<br />\nensuring no duplicates, which is critical for data integrity.</p>\n","status":"failed","statusMessage":"AssertionError: Found duplicates in device_segments:\n  Device Model: redmi 13, Segment: 01_Top, Count: 2\nassert not [('redmi 13', '01_Top', 2)]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7f1b5a95a810>, <environment.Environment object at 0x7f1b58db37a0>)\n\n    @allure.story('Data_Tables_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Verifies the uniqueness of records in the device_segments table based on the combination of device_model and segment,\n    ensuring no duplicates, which is critical for data integrity.\n    \"\"\")\n    def test_device_segments_uniqueness(setup):\n        \"\"\"\n        Verifies the uniqueness of records in the device_segments table based on the combination of device_model and segment.\n        \"\"\"\n        bq_client, env = setup\n        device_segments = env.get_full_table_id('device_segments')\n    \n        query = f\"\"\"\n            -- Find duplicates based on the combination of device_model and segment\n            -- This helps ensure that each device model and segment is uniquely identified in the table\n            SELECT device_model, segment, COUNT(*) as cnt\n            FROM `{device_segments}`\n            GROUP BY device_model, segment\n            -- Filter groups with more than one record, indicating the presence of duplicates\n            HAVING cnt > 1\n        \"\"\"\n    \n        results = execute_query_and_log(bq_client, query, \"Finding duplicates in device_segments\",\n                                        include_query_in_message=False)\n    \n        duplicates = [(row.device_model, row.segment, row.cnt) for row in results]\n    \n        with allure.step(\"Verifying the absence of duplicates in device_segments\"):\n>           assert not duplicates, \"Found duplicates in device_segments:\\n\" + \\\n                                   \"\\n\".join(\n                                       f\"Device Model: {device_model}, Segment: {segment}, Count: {cnt}\"\n                                       for device_model, segment, cnt in duplicates)\nE           AssertionError: Found duplicates in device_segments:\nE             Device Model: redmi 13, Segment: 01_Top, Count: 2\nE           assert not [('redmi 13', '01_Top', 2)]\n\ntests/test_data_in_tables.py:118: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1731084434898,"stop":1731084434899,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nVerifies the uniqueness of records in the device_segments table based on the combination of device_model and segment, \nensuring no duplicates, which is critical for data integrity.\n","status":"failed","statusMessage":"AssertionError: Found duplicates in device_segments:\n  Device Model: redmi 13, Segment: 01_Top, Count: 2\nassert not [('redmi 13', '01_Top', 2)]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7f1b5a95a810>, <environment.Environment object at 0x7f1b58db37a0>)\n\n    @allure.story('Data_Tables_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Verifies the uniqueness of records in the device_segments table based on the combination of device_model and segment,\n    ensuring no duplicates, which is critical for data integrity.\n    \"\"\")\n    def test_device_segments_uniqueness(setup):\n        \"\"\"\n        Verifies the uniqueness of records in the device_segments table based on the combination of device_model and segment.\n        \"\"\"\n        bq_client, env = setup\n        device_segments = env.get_full_table_id('device_segments')\n    \n        query = f\"\"\"\n            -- Find duplicates based on the combination of device_model and segment\n            -- This helps ensure that each device model and segment is uniquely identified in the table\n            SELECT device_model, segment, COUNT(*) as cnt\n            FROM `{device_segments}`\n            GROUP BY device_model, segment\n            -- Filter groups with more than one record, indicating the presence of duplicates\n            HAVING cnt > 1\n        \"\"\"\n    \n        results = execute_query_and_log(bq_client, query, \"Finding duplicates in device_segments\",\n                                        include_query_in_message=False)\n    \n        duplicates = [(row.device_model, row.segment, row.cnt) for row in results]\n    \n        with allure.step(\"Verifying the absence of duplicates in device_segments\"):\n>           assert not duplicates, \"Found duplicates in device_segments:\\n\" + \\\n                                   \"\\n\".join(\n                                       f\"Device Model: {device_model}, Segment: {segment}, Count: {cnt}\"\n                                       for device_model, segment, cnt in duplicates)\nE           AssertionError: Found duplicates in device_segments:\nE             Device Model: redmi 13, Segment: 01_Top, Count: 2\nE           assert not [('redmi 13', '01_Top', 2)]\n\ntests/test_data_in_tables.py:118: AssertionError","steps":[{"name":"Finding duplicates in device_segments","time":{"start":1731084438417,"stop":1731084439400,"duration":983},"status":"passed","steps":[],"attachments":[{"uid":"58a9eed4df46bec8","name":"SQL Query","source":"58a9eed4df46bec8.txt","type":"text/plain","size":457},{"uid":"5fe04475728a5ec9","name":"SQL Results","source":"5fe04475728a5ec9.json","type":"application/json","size":97}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"Verifying the absence of duplicates in device_segments","time":{"start":1731084439400,"stop":1731084439400,"duration":0},"status":"failed","statusMessage":"AssertionError: Found duplicates in device_segments:\n  Device Model: redmi 13, Segment: 01_Top, Count: 2\nassert not [('redmi 13', '01_Top', 2)]\n","statusTrace":"  File \"/tests_project/tests/test_data_in_tables.py\", line 118, in test_device_segments_uniqueness\n    assert not duplicates, \"Found duplicates in device_segments:\\n\" + \\\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Data_Tables_Creation"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_data_in_tables"},{"name":"host","value":"27ca6fce9de0"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_data_in_tables"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"a41a85d1a386ac26.json","parameterValues":[]}