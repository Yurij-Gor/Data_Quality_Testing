{"uid":"ac7f4ba1124a3d87","name":"test_device_segments_uniqueness","fullName":"tests.test_data_in_tables#test_device_segments_uniqueness","historyId":"57e3a93a46f6ba15708add02456e3c2e","time":{"start":1712870160920,"stop":1712870162137,"duration":1217},"description":"\nПроверяет уникальность записей в таблице device_segments по сочетанию device_model и segment, гарантируя отсутствие дубликатов, что важно для целостности данных.\n","descriptionHtml":"<p>Проверяет уникальность записей в таблице device_segments по сочетанию device_model и segment, гарантируя отсутствие дубликатов, что важно для целостности данных.</p>\n","status":"failed","statusMessage":"AssertionError: Обнаружены дубликаты в device_segments:\n  Модель устройства: redmi 13, Сегмент: 01_Top, Количество: 2\nassert not [('redmi 13', '01_Top', 2)]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7fb6c0f57e90>, <environment.Environment object at 0x7fb6c0f54170>)\n\n    @allure.story('Data_Tables_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Проверяет уникальность записей в таблице device_segments по сочетанию device_model и segment, гарантируя отсутствие дубликатов, что важно для целостности данных.\n    \"\"\")\n    def test_device_segments_uniqueness(setup):\n        \"\"\"\n        Проверка на уникальность записей в таблице device_segments по сочетанию device_model и segment.\n        \"\"\"\n        bq_client, env = setup\n        device_segments = env.get_full_table_id('device_segments')\n    \n        query = f\"\"\"\n            -- Поиск дубликатов по сочетанию device_model и segment\n            -- Это помогает обеспечить, что каждая модель устройства и сегмент уникально идентифицированы в таблице\n            SELECT device_model, segment, COUNT(*) as cnt\n            FROM `{device_segments}`\n            GROUP BY device_model, segment\n            -- Фильтрация групп, в которых количество записей больше одной, что указывает на наличие дубликатов\n            HAVING cnt > 1\n        \"\"\"\n    \n        results = execute_query_and_log(bq_client, query, \"Поиск дубликатов в device_segments\",\n                                        include_query_in_message=True)\n    \n        duplicates = [(row.device_model, row.segment, row.cnt) for row in results]\n    \n        with allure.step(\"Проверка на отсутствие дубликатов в device_segments\"):\n>           assert not duplicates, \"Обнаружены дубликаты в device_segments:\\n\" + \\\n                                   \"\\n\".join(\n                                       f\"Модель устройства: {device_model}, Сегмент: {segment}, Количество: {cnt}\"\n                                       for device_model, segment, cnt in duplicates)\nE           AssertionError: Обнаружены дубликаты в device_segments:\nE             Модель устройства: redmi 13, Сегмент: 01_Top, Количество: 2\nE           assert not [('redmi 13', '01_Top', 2)]\n\ntests/test_data_in_tables.py:157: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1712870155570,"stop":1712870155572,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nПроверяет уникальность записей в таблице device_segments по сочетанию device_model и segment, гарантируя отсутствие дубликатов, что важно для целостности данных.\n","status":"failed","statusMessage":"AssertionError: Обнаружены дубликаты в device_segments:\n  Модель устройства: redmi 13, Сегмент: 01_Top, Количество: 2\nassert not [('redmi 13', '01_Top', 2)]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7fb6c0f57e90>, <environment.Environment object at 0x7fb6c0f54170>)\n\n    @allure.story('Data_Tables_Creation')\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.description(\"\"\"\n    Проверяет уникальность записей в таблице device_segments по сочетанию device_model и segment, гарантируя отсутствие дубликатов, что важно для целостности данных.\n    \"\"\")\n    def test_device_segments_uniqueness(setup):\n        \"\"\"\n        Проверка на уникальность записей в таблице device_segments по сочетанию device_model и segment.\n        \"\"\"\n        bq_client, env = setup\n        device_segments = env.get_full_table_id('device_segments')\n    \n        query = f\"\"\"\n            -- Поиск дубликатов по сочетанию device_model и segment\n            -- Это помогает обеспечить, что каждая модель устройства и сегмент уникально идентифицированы в таблице\n            SELECT device_model, segment, COUNT(*) as cnt\n            FROM `{device_segments}`\n            GROUP BY device_model, segment\n            -- Фильтрация групп, в которых количество записей больше одной, что указывает на наличие дубликатов\n            HAVING cnt > 1\n        \"\"\"\n    \n        results = execute_query_and_log(bq_client, query, \"Поиск дубликатов в device_segments\",\n                                        include_query_in_message=True)\n    \n        duplicates = [(row.device_model, row.segment, row.cnt) for row in results]\n    \n        with allure.step(\"Проверка на отсутствие дубликатов в device_segments\"):\n>           assert not duplicates, \"Обнаружены дубликаты в device_segments:\\n\" + \\\n                                   \"\\n\".join(\n                                       f\"Модель устройства: {device_model}, Сегмент: {segment}, Количество: {cnt}\"\n                                       for device_model, segment, cnt in duplicates)\nE           AssertionError: Обнаружены дубликаты в device_segments:\nE             Модель устройства: redmi 13, Сегмент: 01_Top, Количество: 2\nE           assert not [('redmi 13', '01_Top', 2)]\n\ntests/test_data_in_tables.py:157: AssertionError","steps":[{"name":"Поиск дубликатов в device_segments\n\nExecuted query:\n\n        -- Поиск дубликатов по сочетанию device_model и segment\n        -- Это помогает обеспечить, что каждая модель устройства и сегмент уникально идентифицированы в таблице\n        SELECT device_model, segment, COUNT(*) as cnt\n        FROM `data-quality-project-1.dq_data_set.device_segments`\n        GROUP BY device_model, segment\n        -- Фильтрация групп, в которых количество записей больше одной, что указывает на наличие дубликатов\n        HAVING cnt > 1\n    ","time":{"start":1712870160920,"stop":1712870161861,"duration":941},"status":"passed","steps":[],"attachments":[{"uid":"c4047cd011d6331f","name":"SQL Query","source":"c4047cd011d6331f.txt","type":"text/plain","size":667}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Проверка на отсутствие дубликатов в device_segments","time":{"start":1712870162137,"stop":1712870162137,"duration":0},"status":"failed","statusMessage":"AssertionError: Обнаружены дубликаты в device_segments:\n  Модель устройства: redmi 13, Сегмент: 01_Top, Количество: 2\nassert not [('redmi 13', '01_Top', 2)]\n","statusTrace":"  File \"/tests_project/tests/test_data_in_tables.py\", line 157, in test_device_segments_uniqueness\n    assert not duplicates, \"Обнаружены дубликаты в device_segments:\\n\" + \\\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Data_Tables_Creation"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_data_in_tables"},{"name":"host","value":"cb7398c278e1"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_data_in_tables"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ac7f4ba1124a3d87.json","parameterValues":[]}