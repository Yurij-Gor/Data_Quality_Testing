{"uid":"ea0c519fd3e83f30","name":"test_app_names_platform_consistency","fullName":"tests.test_data_in_tables#test_app_names_platform_consistency","historyId":"833555ed795ee9548f45b8813ab9c4ff","time":{"start":1731084443669,"stop":1731084444634,"duration":965},"description":"\nVerifies the consistency between app names and platforms in the app_names and device_segments tables. \nThis ensures that each app and its corresponding platform are correctly reflected in both tables, \nmaintaining data integrity.\n","descriptionHtml":"<p>Verifies the consistency between app names and platforms in the app_names and device_segments tables.<br />\nThis ensures that each app and its corresponding platform are correctly reflected in both tables,<br />\nmaintaining data integrity.</p>\n","status":"failed","statusMessage":"AssertionError: Verifying the absence of inconsistent app names and platforms app_name: gs_as, platform: as, app_name: hs_as, platform: as\nassert not [('gs_as', 'as'), ('hs_as', 'as')]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7f1b5a95a810>, <environment.Environment object at 0x7f1b58db37a0>)\n\n    @allure.story('Data_Tables_Creation')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"\"\"\n    Verifies the consistency between app names and platforms in the app_names and device_segments tables.\n    This ensures that each app and its corresponding platform are correctly reflected in both tables,\n    maintaining data integrity.\n    \"\"\")\n    def test_app_names_platform_consistency(setup):\n        \"\"\"\n        Verifies that each app name and corresponding platform from the app_names table\n        has a match in the device_segments table.\n        \"\"\"\n        bq_client, env = setup\n        app_names = env.get_full_table_id('app_names')\n        device_segments = env.get_full_table_id('device_segments')\n    \n        # Query to verify consistency of app names and platforms between app_names and device_segments tables.\n        query = f\"\"\"\n            -- Query to verify consistency of app names and platforms between app_names and device_segments tables.\n            -- Uses LEFT JOIN to link records from app_names with corresponding records in device_segments.\n            -- The condition ON an.app_name = ds.app_short AND an.platform = ds.platform ensures matching on both key fields.\n            -- The condition WHERE ds.app_short IS NULL OR ds.platform IS NULL filters cases where corresponding records in device_segments are missing,\n            -- indicating inconsistency between the tables.\n            SELECT an.app_name, an.platform\n            FROM `{app_names}` an\n            LEFT JOIN `{device_segments}` ds ON an.app_name = ds.app_short AND an.platform = ds.platform\n            WHERE ds.app_short IS NULL OR ds.platform IS NULL\n        \"\"\"\n    \n        # Use our helper function to execute the query and log it in Allure.\n        inconsistencies = execute_query_and_log(bq_client, query,\n                                                \"Verifying consistency of app names and platforms\",\n                                                include_query_in_message=False)\n    \n        # Convert the query results into a list for easier verification.\n        inconsistencies_details = [(row.app_name, row.platform) for row in inconsistencies]\n    \n        with allure.step(\"Verifying the absence of inconsistent app names and platforms\"):\n>           assert not inconsistencies_details, \"Verifying the absence of inconsistent app names and platforms \" + \\\n                                                \", \".join(f\"app_name: {app_name}, platform: {platform}\" for app_name, platform in\n                                                          inconsistencies_details)\nE           AssertionError: Verifying the absence of inconsistent app names and platforms app_name: gs_as, platform: as, app_name: hs_as, platform: as\nE           assert not [('gs_as', 'as'), ('hs_as', 'as')]\n\ntests/test_data_in_tables.py:303: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1731084434898,"stop":1731084434899,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nVerifies the consistency between app names and platforms in the app_names and device_segments tables. \nThis ensures that each app and its corresponding platform are correctly reflected in both tables, \nmaintaining data integrity.\n","status":"failed","statusMessage":"AssertionError: Verifying the absence of inconsistent app names and platforms app_name: gs_as, platform: as, app_name: hs_as, platform: as\nassert not [('gs_as', 'as'), ('hs_as', 'as')]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7f1b5a95a810>, <environment.Environment object at 0x7f1b58db37a0>)\n\n    @allure.story('Data_Tables_Creation')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"\"\"\n    Verifies the consistency between app names and platforms in the app_names and device_segments tables.\n    This ensures that each app and its corresponding platform are correctly reflected in both tables,\n    maintaining data integrity.\n    \"\"\")\n    def test_app_names_platform_consistency(setup):\n        \"\"\"\n        Verifies that each app name and corresponding platform from the app_names table\n        has a match in the device_segments table.\n        \"\"\"\n        bq_client, env = setup\n        app_names = env.get_full_table_id('app_names')\n        device_segments = env.get_full_table_id('device_segments')\n    \n        # Query to verify consistency of app names and platforms between app_names and device_segments tables.\n        query = f\"\"\"\n            -- Query to verify consistency of app names and platforms between app_names and device_segments tables.\n            -- Uses LEFT JOIN to link records from app_names with corresponding records in device_segments.\n            -- The condition ON an.app_name = ds.app_short AND an.platform = ds.platform ensures matching on both key fields.\n            -- The condition WHERE ds.app_short IS NULL OR ds.platform IS NULL filters cases where corresponding records in device_segments are missing,\n            -- indicating inconsistency between the tables.\n            SELECT an.app_name, an.platform\n            FROM `{app_names}` an\n            LEFT JOIN `{device_segments}` ds ON an.app_name = ds.app_short AND an.platform = ds.platform\n            WHERE ds.app_short IS NULL OR ds.platform IS NULL\n        \"\"\"\n    \n        # Use our helper function to execute the query and log it in Allure.\n        inconsistencies = execute_query_and_log(bq_client, query,\n                                                \"Verifying consistency of app names and platforms\",\n                                                include_query_in_message=False)\n    \n        # Convert the query results into a list for easier verification.\n        inconsistencies_details = [(row.app_name, row.platform) for row in inconsistencies]\n    \n        with allure.step(\"Verifying the absence of inconsistent app names and platforms\"):\n>           assert not inconsistencies_details, \"Verifying the absence of inconsistent app names and platforms \" + \\\n                                                \", \".join(f\"app_name: {app_name}, platform: {platform}\" for app_name, platform in\n                                                          inconsistencies_details)\nE           AssertionError: Verifying the absence of inconsistent app names and platforms app_name: gs_as, platform: as, app_name: hs_as, platform: as\nE           assert not [('gs_as', 'as'), ('hs_as', 'as')]\n\ntests/test_data_in_tables.py:303: AssertionError","steps":[{"name":"Verifying consistency of app names and platforms","time":{"start":1731084443669,"stop":1731084444633,"duration":964},"status":"passed","steps":[],"attachments":[{"uid":"f6dafb514ed173a5","name":"SQL Query","source":"f6dafb514ed173a5.txt","type":"text/plain","size":845},{"uid":"f03d2be1b73ed35c","name":"SQL Results","source":"f03d2be1b73ed35c.json","type":"application/json","size":136}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"Verifying the absence of inconsistent app names and platforms","time":{"start":1731084444633,"stop":1731084444634,"duration":1},"status":"failed","statusMessage":"AssertionError: Verifying the absence of inconsistent app names and platforms app_name: gs_as, platform: as, app_name: hs_as, platform: as\nassert not [('gs_as', 'as'), ('hs_as', 'as')]\n","statusTrace":"  File \"/tests_project/tests/test_data_in_tables.py\", line 303, in test_app_names_platform_consistency\n    assert not inconsistencies_details, \"Verifying the absence of inconsistent app names and platforms \" + \\\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"Data_Tables_Creation"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_data_in_tables"},{"name":"host","value":"27ca6fce9de0"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_data_in_tables"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ea0c519fd3e83f30.json","parameterValues":[]}