{"uid":"feb9e6a84720db60","name":"test_non_target_device_usage","fullName":"tests.test_v_agg_data#test_non_target_device_usage","historyId":"c4175a9b74b0bba553a3476f79e16687","time":{"start":1712447607314,"stop":1712447607967,"duration":653},"description":"\nПроверка использования 'non_target_device' в представлении v_agg_data только в случаях отсутствия сегментов устройств в таблице device_segments.\n","descriptionHtml":"<p>Проверка использования 'non_target_device' в представлении v_agg_data только в случаях отсутствия сегментов устройств в таблице device_segments.</p>\n","status":"failed","statusMessage":"AssertionError: Обнаружено некорректное использование 'non_target_device':\n  Модель: 'iphone 7', Ожидаемые сегменты: [01_Top]\n  Модель: 'redmi 13', Ожидаемые сегменты: [01_Top,01_Top]\n  Модель: 'redmi 5', Ожидаемые сегменты: [05_Low]\n  Модель: 'iphone 13', Ожидаемые сегменты: [03_Mid2]\nassert not [\"Модель: 'iphone 7', Ожидаемые сегменты: [01_Top]\", \"Модель: 'redmi 13', Ожидаемые сегменты: [01_Top,01_Top]\", \"Модель: 'redmi 5', Ожидаемые сегменты: [05_Low]\", \"Модель: 'iphone 13', Ожидаемые сегменты: [03_Mid2]\"]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7fb69d327fb0>, <environment.Environment object at 0x7fb69d3263c0>)\n\n    @allure.story('View_Creation')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"\"\"\n    Проверка использования 'non_target_device' в представлении v_agg_data только в случаях отсутствия сегментов устройств в таблице device_segments.\n    \"\"\")\n    def test_non_target_device_usage(setup):\n        \"\"\"\n        Проверка корректности использования 'non_target_device' в v_agg_data.\n        Этот тест проверяет, что 'non_target_device' используется только когда нет соответствующих сегментов в device_segments.\n        Если модели устройств есть в device_segments, использование 'non_target_device' считается ошибочным.\n        \"\"\"\n        bq_client, env = setup  # Распаковываем возвращаемые значения фикстуры\n        v_agg_data = env.get_full_table_id('v_agg_data')  # Получаем полный ID таблицы v_agg_data\n        device_segments = env.get_full_table_id('device_segments')  # Получаем полный идентификатор таблицы device_segments\n    \n        # Формирование запроса для выборки моделей устройств с 'non_target_device' и проверка на их наличие в device_segments.\n        query = f\"\"\"\n        -- Выборка моделей устройств, помеченных как 'non_target_device', и проверка на их наличие в таблице device_segments.\n        -- В случае если модель присутствует в device_segments, это указывает на ошибочное использование метки 'non_target_device'.\n        SELECT\n          v.device_model,\n          STRING_AGG(d.segment) AS expected_segments  -- Агрегируем все сегменты, связанные с моделью устройства, в строку.\n        FROM (\n          SELECT DISTINCT device_model  -- Выборка уникальных моделей устройств с меткой 'non_target_device' из v_agg_data.\n          FROM `{v_agg_data}`\n          WHERE device_segment = 'non_target_device'\n        ) v\n        LEFT JOIN `{device_segments}` d ON v.device_model = d.device_model  -- Соединяем с таблицей device_segments для проверки наличия модели.\n        GROUP BY v.device_model\n        HAVING COUNT(d.segment) > 0  -- Отбираем только те случаи, где модель имеет хотя бы один сегмент в device_segments.\n        \"\"\"\n    \n        # Выполнение запроса и логирование в Allure.\n        results = execute_query_and_log(bq_client, query,\n                                        \"Проверка некорректного использования 'non_target_device'\",\n                                        include_query_in_message=True)\n    \n        # Сбор информации о моделях и сегментах для сообщения об ошибке.\n        incorrect_models = []\n        for row in results:\n            incorrect_models.append(f\"Модель: '{row.device_model}', Ожидаемые сегменты: [{row.expected_segments}]\")\n    \n        # Ассерт, проверяющий, что не найдены модели устройств, ошибочно помеченные как 'non_target_device'.\n>       assert not incorrect_models, \"Обнаружено некорректное использование 'non_target_device':\\n\" + \"\\n\".join(incorrect_models)\nE       AssertionError: Обнаружено некорректное использование 'non_target_device':\nE         Модель: 'iphone 7', Ожидаемые сегменты: [01_Top]\nE         Модель: 'redmi 13', Ожидаемые сегменты: [01_Top,01_Top]\nE         Модель: 'redmi 5', Ожидаемые сегменты: [05_Low]\nE         Модель: 'iphone 13', Ожидаемые сегменты: [03_Mid2]\nE       assert not [\"Модель: 'iphone 7', Ожидаемые сегменты: [01_Top]\", \"Модель: 'redmi 13', Ожидаемые сегменты: [01_Top,01_Top]\", \"Модель: 'redmi 5', Ожидаемые сегменты: [05_Low]\", \"Модель: 'iphone 13', Ожидаемые сегменты: [03_Mid2]\"]\n\ntests/test_v_agg_data.py:225: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1712447601948,"stop":1712447601950,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nПроверка использования 'non_target_device' в представлении v_agg_data только в случаях отсутствия сегментов устройств в таблице device_segments.\n","status":"failed","statusMessage":"AssertionError: Обнаружено некорректное использование 'non_target_device':\n  Модель: 'iphone 7', Ожидаемые сегменты: [01_Top]\n  Модель: 'redmi 13', Ожидаемые сегменты: [01_Top,01_Top]\n  Модель: 'redmi 5', Ожидаемые сегменты: [05_Low]\n  Модель: 'iphone 13', Ожидаемые сегменты: [03_Mid2]\nassert not [\"Модель: 'iphone 7', Ожидаемые сегменты: [01_Top]\", \"Модель: 'redmi 13', Ожидаемые сегменты: [01_Top,01_Top]\", \"Модель: 'redmi 5', Ожидаемые сегменты: [05_Low]\", \"Модель: 'iphone 13', Ожидаемые сегменты: [03_Mid2]\"]","statusTrace":"setup = (<google.cloud.bigquery.client.Client object at 0x7fb69d327fb0>, <environment.Environment object at 0x7fb69d3263c0>)\n\n    @allure.story('View_Creation')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"\"\"\n    Проверка использования 'non_target_device' в представлении v_agg_data только в случаях отсутствия сегментов устройств в таблице device_segments.\n    \"\"\")\n    def test_non_target_device_usage(setup):\n        \"\"\"\n        Проверка корректности использования 'non_target_device' в v_agg_data.\n        Этот тест проверяет, что 'non_target_device' используется только когда нет соответствующих сегментов в device_segments.\n        Если модели устройств есть в device_segments, использование 'non_target_device' считается ошибочным.\n        \"\"\"\n        bq_client, env = setup  # Распаковываем возвращаемые значения фикстуры\n        v_agg_data = env.get_full_table_id('v_agg_data')  # Получаем полный ID таблицы v_agg_data\n        device_segments = env.get_full_table_id('device_segments')  # Получаем полный идентификатор таблицы device_segments\n    \n        # Формирование запроса для выборки моделей устройств с 'non_target_device' и проверка на их наличие в device_segments.\n        query = f\"\"\"\n        -- Выборка моделей устройств, помеченных как 'non_target_device', и проверка на их наличие в таблице device_segments.\n        -- В случае если модель присутствует в device_segments, это указывает на ошибочное использование метки 'non_target_device'.\n        SELECT\n          v.device_model,\n          STRING_AGG(d.segment) AS expected_segments  -- Агрегируем все сегменты, связанные с моделью устройства, в строку.\n        FROM (\n          SELECT DISTINCT device_model  -- Выборка уникальных моделей устройств с меткой 'non_target_device' из v_agg_data.\n          FROM `{v_agg_data}`\n          WHERE device_segment = 'non_target_device'\n        ) v\n        LEFT JOIN `{device_segments}` d ON v.device_model = d.device_model  -- Соединяем с таблицей device_segments для проверки наличия модели.\n        GROUP BY v.device_model\n        HAVING COUNT(d.segment) > 0  -- Отбираем только те случаи, где модель имеет хотя бы один сегмент в device_segments.\n        \"\"\"\n    \n        # Выполнение запроса и логирование в Allure.\n        results = execute_query_and_log(bq_client, query,\n                                        \"Проверка некорректного использования 'non_target_device'\",\n                                        include_query_in_message=True)\n    \n        # Сбор информации о моделях и сегментах для сообщения об ошибке.\n        incorrect_models = []\n        for row in results:\n            incorrect_models.append(f\"Модель: '{row.device_model}', Ожидаемые сегменты: [{row.expected_segments}]\")\n    \n        # Ассерт, проверяющий, что не найдены модели устройств, ошибочно помеченные как 'non_target_device'.\n>       assert not incorrect_models, \"Обнаружено некорректное использование 'non_target_device':\\n\" + \"\\n\".join(incorrect_models)\nE       AssertionError: Обнаружено некорректное использование 'non_target_device':\nE         Модель: 'iphone 7', Ожидаемые сегменты: [01_Top]\nE         Модель: 'redmi 13', Ожидаемые сегменты: [01_Top,01_Top]\nE         Модель: 'redmi 5', Ожидаемые сегменты: [05_Low]\nE         Модель: 'iphone 13', Ожидаемые сегменты: [03_Mid2]\nE       assert not [\"Модель: 'iphone 7', Ожидаемые сегменты: [01_Top]\", \"Модель: 'redmi 13', Ожидаемые сегменты: [01_Top,01_Top]\", \"Модель: 'redmi 5', Ожидаемые сегменты: [05_Low]\", \"Модель: 'iphone 13', Ожидаемые сегменты: [03_Mid2]\"]\n\ntests/test_v_agg_data.py:225: AssertionError","steps":[{"name":"Проверка некорректного использования 'non_target_device'\n\nExecuted query:\n\n    -- Выборка моделей устройств, помеченных как 'non_target_device', и проверка на их наличие в таблице device_segments.\n    -- В случае если модель присутствует в device_segments, это указывает на ошибочное использование метки 'non_target_device'.\n    SELECT \n      v.device_model, \n      STRING_AGG(d.segment) AS expected_segments  -- Агрегируем все сегменты, связанные с моделью устройства, в строку.\n    FROM (\n      SELECT DISTINCT device_model  -- Выборка уникальных моделей устройств с меткой 'non_target_device' из v_agg_data.\n      FROM `data-quality-project-1.dq_data_set.v_agg_data`\n      WHERE device_segment = 'non_target_device'\n    ) v\n    LEFT JOIN `data-quality-project-1.dq_data_set.device_segments` d ON v.device_model = d.device_model  -- Соединяем с таблицей device_segments для проверки наличия модели.\n    GROUP BY v.device_model\n    HAVING COUNT(d.segment) > 0  -- Отбираем только те случаи, где модель имеет хотя бы один сегмент в device_segments.\n    ","time":{"start":1712447607314,"stop":1712447607815,"duration":501},"status":"passed","steps":[],"attachments":[{"uid":"30eb8f9977addb0a","name":"SQL Query","source":"30eb8f9977addb0a.txt","type":"text/plain","size":1307}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"View_Creation"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_v_agg_data"},{"name":"host","value":"c74da31ad21d"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_v_agg_data"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"feb9e6a84720db60.json","parameterValues":[]}